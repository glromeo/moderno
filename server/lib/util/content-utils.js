"use strict";
const NODE_FETCH_USER_AGENT = "node-fetch/1.0 (+https://github.com/bitinn/node-fetch)";
module.exports.contentText = function (content) {
    if (typeof content === "string") {
        return content;
    }
    if (isStream(content)) {
        return new Promise(function (resolve, reject) {
            let text = "";
            content.setEncoding("utf8");
            content.on("data", function (chunk) {
                text += chunk;
            });
            content.on("end", function () {
                resolve(text);
            });
            content.on("error", reject);
        });
    }
    if (Buffer.isBuffer(content)) {
        return content.toString();
    }
    return "";
};
module.exports.sendContent = function (stream, content, userAgent) {
    if (isStream(content)) {
        return new Promise(function (resolve, reject) {
            stream.on('end', resolve);
            stream.on('error', reject);
            content.pipe(stream);
        });
    }
    else if (Buffer.isBuffer(content)) {
        stream.end(content, "binary");
    }
    else {
        // This is to circumvent an issue with node-fetch returning empty response.text()
        // when emoji are used in the response
        stream.end(content, userAgent === NODE_FETCH_USER_AGENT ? "binary" : "utf-8");
    }
};
function isStream(stream) {
    return stream !== null && typeof stream === "object" && typeof stream.pipe === "function";
}
module.exports.EMPTY_OBJECT = Object.freeze(Object.create(null));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGVudC11dGlscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL2NvbnRlbnQtdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU0scUJBQXFCLEdBQUcsd0RBQXdELENBQUM7QUFFdkYsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEdBQUcsVUFBVSxPQUFPO0lBRTFDLElBQUksT0FBTyxPQUFPLEtBQUssUUFBUSxFQUFFO1FBQzdCLE9BQU8sT0FBTyxDQUFDO0tBQ2xCO0lBRUQsSUFBSSxRQUFRLENBQUMsT0FBTyxDQUFDLEVBQUU7UUFDbkIsT0FBTyxJQUFJLE9BQU8sQ0FBQyxVQUFVLE9BQU8sRUFBRSxNQUFNO1lBQ3hDLElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQztZQUNkLE9BQU8sQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDNUIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsVUFBVSxLQUFLO2dCQUM5QixJQUFJLElBQUksS0FBSyxDQUFDO1lBQ2xCLENBQUMsQ0FBQyxDQUFDO1lBQ0gsT0FBTyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUU7Z0JBQ2QsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2xCLENBQUMsQ0FBQyxDQUFDO1lBQ0gsT0FBTyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDaEMsQ0FBQyxDQUFDLENBQUM7S0FDTjtJQUVELElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRTtRQUMxQixPQUFPLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQztLQUM3QjtJQUVELE9BQU8sRUFBRSxDQUFDO0FBQ2QsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEdBQUcsVUFBVSxNQUFNLEVBQUUsT0FBTyxFQUFFLFNBQVM7SUFFN0QsSUFBSSxRQUFRLENBQUMsT0FBTyxDQUFDLEVBQUU7UUFDbkIsT0FBTyxJQUFJLE9BQU8sQ0FBQyxVQUFVLE9BQU8sRUFBRSxNQUFNO1lBQ3hDLE1BQU0sQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQzFCLE1BQU0sQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQzNCLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDekIsQ0FBQyxDQUFDLENBQUM7S0FDTjtTQUFNLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRTtRQUNqQyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQztLQUNqQztTQUFNO1FBQ0gsaUZBQWlGO1FBQ2pGLHNDQUFzQztRQUN0QyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxTQUFTLEtBQUsscUJBQXFCLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDakY7QUFDTCxDQUFDLENBQUM7QUFFRixTQUFTLFFBQVEsQ0FBQyxNQUFNO0lBQ3BCLE9BQU8sTUFBTSxLQUFLLElBQUksSUFBSSxPQUFPLE1BQU0sS0FBSyxRQUFRLElBQUksT0FBTyxNQUFNLENBQUMsSUFBSSxLQUFLLFVBQVUsQ0FBQztBQUM5RixDQUFDO0FBRUQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBOT0RFX0ZFVENIX1VTRVJfQUdFTlQgPSBcIm5vZGUtZmV0Y2gvMS4wICgraHR0cHM6Ly9naXRodWIuY29tL2JpdGlubi9ub2RlLWZldGNoKVwiO1xyXG5cclxubW9kdWxlLmV4cG9ydHMuY29udGVudFRleHQgPSBmdW5jdGlvbiAoY29udGVudCkge1xyXG5cclxuICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgIHJldHVybiBjb250ZW50O1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChpc1N0cmVhbShjb250ZW50KSkge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgIGxldCB0ZXh0ID0gXCJcIjtcclxuICAgICAgICAgICAgY29udGVudC5zZXRFbmNvZGluZyhcInV0ZjhcIik7XHJcbiAgICAgICAgICAgIGNvbnRlbnQub24oXCJkYXRhXCIsIGZ1bmN0aW9uIChjaHVuaykge1xyXG4gICAgICAgICAgICAgICAgdGV4dCArPSBjaHVuaztcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGNvbnRlbnQub24oXCJlbmRcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSh0ZXh0KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGNvbnRlbnQub24oXCJlcnJvclwiLCByZWplY3QpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChCdWZmZXIuaXNCdWZmZXIoY29udGVudCkpIHtcclxuICAgICAgICByZXR1cm4gY29udGVudC50b1N0cmluZygpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBcIlwiO1xyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMuc2VuZENvbnRlbnQgPSBmdW5jdGlvbiAoc3RyZWFtLCBjb250ZW50LCB1c2VyQWdlbnQpIHtcclxuXHJcbiAgICBpZiAoaXNTdHJlYW0oY29udGVudCkpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICBzdHJlYW0ub24oJ2VuZCcsIHJlc29sdmUpO1xyXG4gICAgICAgICAgICBzdHJlYW0ub24oJ2Vycm9yJywgcmVqZWN0KTtcclxuICAgICAgICAgICAgY29udGVudC5waXBlKHN0cmVhbSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9IGVsc2UgaWYgKEJ1ZmZlci5pc0J1ZmZlcihjb250ZW50KSkge1xyXG4gICAgICAgIHN0cmVhbS5lbmQoY29udGVudCwgXCJiaW5hcnlcIik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIFRoaXMgaXMgdG8gY2lyY3VtdmVudCBhbiBpc3N1ZSB3aXRoIG5vZGUtZmV0Y2ggcmV0dXJuaW5nIGVtcHR5IHJlc3BvbnNlLnRleHQoKVxyXG4gICAgICAgIC8vIHdoZW4gZW1vamkgYXJlIHVzZWQgaW4gdGhlIHJlc3BvbnNlXHJcbiAgICAgICAgc3RyZWFtLmVuZChjb250ZW50LCB1c2VyQWdlbnQgPT09IE5PREVfRkVUQ0hfVVNFUl9BR0VOVCA/IFwiYmluYXJ5XCIgOiBcInV0Zi04XCIpO1xyXG4gICAgfVxyXG59O1xyXG5cclxuZnVuY3Rpb24gaXNTdHJlYW0oc3RyZWFtKSB7XHJcbiAgICByZXR1cm4gc3RyZWFtICE9PSBudWxsICYmIHR5cGVvZiBzdHJlYW0gPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIHN0cmVhbS5waXBlID09PSBcImZ1bmN0aW9uXCI7XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzLkVNUFRZX09CSkVDVCA9IE9iamVjdC5mcmVlemUoT2JqZWN0LmNyZWF0ZShudWxsKSk7XHJcbiJdfQ==