"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.contentType = exports.CSS_CONTENT_TYPE = exports.SCSS_CONTENT_TYPE = exports.SASS_CONTENT_TYPE = exports.HTML_CONTENT_TYPE = exports.TYPESCRIPT_CONTENT_TYPE = exports.JAVASCRIPT_CONTENT_TYPE = exports.TEXT_CONTENT_TYPE = exports.JSON_CONTENT_TYPE = void 0;
const mime_db_1 = __importDefault(require("mime-db"));
exports.JSON_CONTENT_TYPE = "application/json; charset=UTF-8";
exports.TEXT_CONTENT_TYPE = "text/plain; charset=UTF-8";
exports.JAVASCRIPT_CONTENT_TYPE = "application/javascript; charset=UTF-8";
exports.TYPESCRIPT_CONTENT_TYPE = "application/x-typescript; charset=UTF-8";
exports.HTML_CONTENT_TYPE = "text/html; charset=UTF-8";
exports.SASS_CONTENT_TYPE = "text/x-sass; charset=UTF-8";
exports.SCSS_CONTENT_TYPE = "text/x-scss; charset=UTF-8";
exports.CSS_CONTENT_TYPE = "text/css; charset=UTF-8";
const mimeTypes = new Map();
for (const contentType of Object.getOwnPropertyNames(mime_db_1.default)) {
    const mimeType = mime_db_1.default[contentType];
    if (mimeType.extensions)
        for (const ext of mimeType.extensions) {
            mimeTypes.set(ext, mimeType);
            mimeType.contentType = `${contentType}; charset=${mimeType.charset || "UTF-8"}`;
        }
}
const JAVASCRIPT_MIME_TYPE = mimeTypes.get("js");
JAVASCRIPT_MIME_TYPE.extensions.push("jsx");
mimeTypes.set("jsx", JAVASCRIPT_MIME_TYPE);
const TYPESCRIPT_MIME_TYPE = {
    "source": "unknown",
    "charset": "UTF-8",
    "compressible": true,
    "extensions": ["ts", "tsx"],
    "contentType": "application/x-typescript; charset=UTF-8"
};
mimeTypes.set("ts", TYPESCRIPT_MIME_TYPE);
mimeTypes.set("tsx", mimeTypes.get("ts"));
function contentType(filename = "") {
    const mimeType = mimeTypes.get(filename);
    if (mimeType) {
        return mimeType.contentType;
    }
    const dot = filename.lastIndexOf(".") + 1;
    if (dot > 0) {
        const mimeType = mimeTypes.get(filename.substring(dot));
        if (mimeType) {
            return mimeType.contentType;
        }
    }
}
exports.contentType = contentType;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWltZS10eXBlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL21pbWUtdHlwZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsc0RBQXlCO0FBRVosUUFBQSxpQkFBaUIsR0FBRyxpQ0FBaUMsQ0FBQztBQUN0RCxRQUFBLGlCQUFpQixHQUFHLDJCQUEyQixDQUFDO0FBQ2hELFFBQUEsdUJBQXVCLEdBQUcsdUNBQXVDLENBQUM7QUFDbEUsUUFBQSx1QkFBdUIsR0FBRyx5Q0FBeUMsQ0FBQztBQUNwRSxRQUFBLGlCQUFpQixHQUFHLDBCQUEwQixDQUFDO0FBQy9DLFFBQUEsaUJBQWlCLEdBQUcsNEJBQTRCLENBQUM7QUFDakQsUUFBQSxpQkFBaUIsR0FBRyw0QkFBNEIsQ0FBQztBQUNqRCxRQUFBLGdCQUFnQixHQUFHLHlCQUF5QixDQUFDO0FBRTFELE1BQU0sU0FBUyxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7QUFFNUIsS0FBSyxNQUFNLFdBQVcsSUFBSSxNQUFNLENBQUMsbUJBQW1CLENBQUMsaUJBQUUsQ0FBQyxFQUFFO0lBQ3RELE1BQU0sUUFBUSxHQUFHLGlCQUFFLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDakMsSUFBSSxRQUFRLENBQUMsVUFBVTtRQUFFLEtBQUssTUFBTSxHQUFHLElBQUksUUFBUSxDQUFDLFVBQVUsRUFBRTtZQUM1RCxTQUFTLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQztZQUM3QixRQUFRLENBQUMsV0FBVyxHQUFHLEdBQUcsV0FBVyxhQUFhLFFBQVEsQ0FBQyxPQUFPLElBQUksT0FBTyxFQUFFLENBQUM7U0FDbkY7Q0FDSjtBQUVELE1BQU0sb0JBQW9CLEdBQUcsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNqRCxvQkFBb0IsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzVDLFNBQVMsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLG9CQUFvQixDQUFDLENBQUM7QUFFM0MsTUFBTSxvQkFBb0IsR0FBRztJQUN6QixRQUFRLEVBQUUsU0FBUztJQUNuQixTQUFTLEVBQUUsT0FBTztJQUNsQixjQUFjLEVBQUUsSUFBSTtJQUNwQixZQUFZLEVBQUUsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDO0lBQzNCLGFBQWEsRUFBRSx5Q0FBeUM7Q0FDM0QsQ0FBQztBQUNGLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLG9CQUFvQixDQUFDLENBQUM7QUFDMUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBRTFDLFNBQWdCLFdBQVcsQ0FBQyxRQUFRLEdBQUcsRUFBRTtJQUNyQyxNQUFNLFFBQVEsR0FBRyxTQUFTLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3pDLElBQUksUUFBUSxFQUFFO1FBQ1YsT0FBTyxRQUFRLENBQUMsV0FBVyxDQUFDO0tBQy9CO0lBQ0QsTUFBTSxHQUFHLEdBQUcsUUFBUSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDMUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxFQUFFO1FBQ1QsTUFBTSxRQUFRLEdBQUcsU0FBUyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDeEQsSUFBSSxRQUFRLEVBQUU7WUFDVixPQUFPLFFBQVEsQ0FBQyxXQUFXLENBQUM7U0FDL0I7S0FDSjtBQUNMLENBQUM7QUFaRCxrQ0FZQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBkYiBmcm9tIFwibWltZS1kYlwiO1xuXG5leHBvcnQgY29uc3QgSlNPTl9DT05URU5UX1RZUEUgPSBcImFwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9VVRGLThcIjtcbmV4cG9ydCBjb25zdCBURVhUX0NPTlRFTlRfVFlQRSA9IFwidGV4dC9wbGFpbjsgY2hhcnNldD1VVEYtOFwiO1xuZXhwb3J0IGNvbnN0IEpBVkFTQ1JJUFRfQ09OVEVOVF9UWVBFID0gXCJhcHBsaWNhdGlvbi9qYXZhc2NyaXB0OyBjaGFyc2V0PVVURi04XCI7XG5leHBvcnQgY29uc3QgVFlQRVNDUklQVF9DT05URU5UX1RZUEUgPSBcImFwcGxpY2F0aW9uL3gtdHlwZXNjcmlwdDsgY2hhcnNldD1VVEYtOFwiO1xuZXhwb3J0IGNvbnN0IEhUTUxfQ09OVEVOVF9UWVBFID0gXCJ0ZXh0L2h0bWw7IGNoYXJzZXQ9VVRGLThcIjtcbmV4cG9ydCBjb25zdCBTQVNTX0NPTlRFTlRfVFlQRSA9IFwidGV4dC94LXNhc3M7IGNoYXJzZXQ9VVRGLThcIjtcbmV4cG9ydCBjb25zdCBTQ1NTX0NPTlRFTlRfVFlQRSA9IFwidGV4dC94LXNjc3M7IGNoYXJzZXQ9VVRGLThcIjtcbmV4cG9ydCBjb25zdCBDU1NfQ09OVEVOVF9UWVBFID0gXCJ0ZXh0L2NzczsgY2hhcnNldD1VVEYtOFwiO1xuXG5jb25zdCBtaW1lVHlwZXMgPSBuZXcgTWFwKCk7XG5cbmZvciAoY29uc3QgY29udGVudFR5cGUgb2YgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoZGIpKSB7XG4gICAgY29uc3QgbWltZVR5cGUgPSBkYltjb250ZW50VHlwZV07XG4gICAgaWYgKG1pbWVUeXBlLmV4dGVuc2lvbnMpIGZvciAoY29uc3QgZXh0IG9mIG1pbWVUeXBlLmV4dGVuc2lvbnMpIHtcbiAgICAgICAgbWltZVR5cGVzLnNldChleHQsIG1pbWVUeXBlKTtcbiAgICAgICAgbWltZVR5cGUuY29udGVudFR5cGUgPSBgJHtjb250ZW50VHlwZX07IGNoYXJzZXQ9JHttaW1lVHlwZS5jaGFyc2V0IHx8IFwiVVRGLThcIn1gO1xuICAgIH1cbn1cblxuY29uc3QgSkFWQVNDUklQVF9NSU1FX1RZUEUgPSBtaW1lVHlwZXMuZ2V0KFwianNcIik7XG5KQVZBU0NSSVBUX01JTUVfVFlQRS5leHRlbnNpb25zLnB1c2goXCJqc3hcIik7XG5taW1lVHlwZXMuc2V0KFwianN4XCIsIEpBVkFTQ1JJUFRfTUlNRV9UWVBFKTtcblxuY29uc3QgVFlQRVNDUklQVF9NSU1FX1RZUEUgPSB7XG4gICAgXCJzb3VyY2VcIjogXCJ1bmtub3duXCIsXG4gICAgXCJjaGFyc2V0XCI6IFwiVVRGLThcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ0c1wiLCBcInRzeFwiXSxcbiAgICBcImNvbnRlbnRUeXBlXCI6IFwiYXBwbGljYXRpb24veC10eXBlc2NyaXB0OyBjaGFyc2V0PVVURi04XCJcbn07XG5taW1lVHlwZXMuc2V0KFwidHNcIiwgVFlQRVNDUklQVF9NSU1FX1RZUEUpO1xubWltZVR5cGVzLnNldChcInRzeFwiLCBtaW1lVHlwZXMuZ2V0KFwidHNcIikpO1xuXG5leHBvcnQgZnVuY3Rpb24gY29udGVudFR5cGUoZmlsZW5hbWUgPSBcIlwiKSB7XG4gICAgY29uc3QgbWltZVR5cGUgPSBtaW1lVHlwZXMuZ2V0KGZpbGVuYW1lKTtcbiAgICBpZiAobWltZVR5cGUpIHtcbiAgICAgICAgcmV0dXJuIG1pbWVUeXBlLmNvbnRlbnRUeXBlO1xuICAgIH1cbiAgICBjb25zdCBkb3QgPSBmaWxlbmFtZS5sYXN0SW5kZXhPZihcIi5cIikgKyAxO1xuICAgIGlmIChkb3QgPiAwKSB7XG4gICAgICAgIGNvbnN0IG1pbWVUeXBlID0gbWltZVR5cGVzLmdldChmaWxlbmFtZS5zdWJzdHJpbmcoZG90KSk7XG4gICAgICAgIGlmIChtaW1lVHlwZSkge1xuICAgICAgICAgICAgcmV0dXJuIG1pbWVUeXBlLmNvbnRlbnRUeXBlO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19