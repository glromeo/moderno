"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.startServer = exports.DEFAULT_SERVER_OPTIONS = void 0;
const logger_1 = __importDefault(require("@moderno/logger"));
const messaging_1 = require("./messaging");
const request_handler_1 = require("./request-handler");
const watcher_1 = require("./watcher");
exports.DEFAULT_SERVER_OPTIONS = {
    protocol: "http",
    host: "localhost",
    port: 3000
};
async function startServer(options) {
    const { server: { protocol, host, port, options: { key, cert, allowHTTP1 } = {} } = exports.DEFAULT_SERVER_OPTIONS } = options;
    const watcher = watcher_1.useWatcher(options);
    const handler = request_handler_1.useRequestHandler(options);
    let module, server;
    if (options.http2) {
        module = require("http2");
        if (protocol === "http") {
            server = module.createServer({ allowHTTP1 }, handler);
        }
        else {
            server = module.createSecureServer({ key, cert, allowHTTP1 }, handler);
        }
    }
    else {
        if (protocol === "http") {
            module = require("http");
            server = module.createServer(handler);
        }
        else {
            module = require("https");
            server = module.createServer({ key, cert }, handler);
        }
    }
    server.on("upgrade", messaging_1.useMessaging(options).handleUpgrade);
    await new Promise(listening => server.listen(port, host, listening));
    const address = `${protocol}://${host}:${port}`;
    logger_1.default.info(`server started on ${address}`);
    const sockets = new Set();
    for (const event of ["connection", "secureConnection"])
        server.on(event, function (socket) {
            sockets.add(socket);
            socket.on("close", () => sockets.delete(socket));
        });
    let closed;
    async function shutdown() {
        if (closed) {
            logger_1.default.debug("shutdown in progress...");
            await closed;
        }
        closed = new Promise(closed => server.on("close", closed));
        if (sockets.size > 0) {
            logger_1.default.debug(`closing ${sockets.size} pending socket...`);
            for (const socket of sockets) {
                socket.destroy();
                sockets.delete(socket);
            }
        }
        logger_1.default.debug(`closing chokidar watcher...`);
        await watcher.close();
        server.close();
        await closed;
        logger_1.default.info("server closed");
        return closed;
    }
    return {
        options,
        module,
        server,
        watcher,
        handler,
        address,
        shutdown
    };
}
exports.startServer = startServer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3NlcnZlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFNQSw2REFBa0M7QUFDbEMsMkNBQXlDO0FBRXpDLHVEQUFvRDtBQUNwRCx1Q0FBcUM7QUFheEIsUUFBQSxzQkFBc0IsR0FBa0I7SUFDakQsUUFBUSxFQUFFLE1BQU07SUFDaEIsSUFBSSxFQUFFLFdBQVc7SUFDakIsSUFBSSxFQUFFLElBQUk7Q0FDYixDQUFDO0FBT0ssS0FBSyxVQUFVLFdBQVcsQ0FBQyxPQUF1QjtJQUVyRCxNQUFNLEVBQ0YsTUFBTSxFQUFFLEVBQ0osUUFBUSxFQUNSLElBQUksRUFDSixJQUFJLEVBQ0osT0FBTyxFQUFFLEVBQ0wsR0FBRyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQ3hCLEdBQUcsRUFBUyxFQUNoQixHQUFHLDhCQUFzQixFQUM3QixHQUFHLE9BQU8sQ0FBQztJQUVaLE1BQU0sT0FBTyxHQUFHLG9CQUFVLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDcEMsTUFBTSxPQUFPLEdBQUcsbUNBQWlCLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFM0MsSUFBSSxNQUFNLEVBQUUsTUFBOEMsQ0FBQztJQUUzRCxJQUFJLE9BQU8sQ0FBQyxLQUFLLEVBQUU7UUFDZixNQUFNLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzFCLElBQUksUUFBUSxLQUFLLE1BQU0sRUFBRTtZQUNyQixNQUFNLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQyxFQUFDLFVBQVUsRUFBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1NBQ3ZEO2FBQU07WUFDSCxNQUFNLEdBQUcsTUFBTSxDQUFDLGtCQUFrQixDQUFDLEVBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztTQUN4RTtLQUNKO1NBQU07UUFDSCxJQUFJLFFBQVEsS0FBSyxNQUFNLEVBQUU7WUFDckIsTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN6QixNQUFNLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUN6QzthQUFNO1lBQ0gsTUFBTSxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUMxQixNQUFNLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQyxFQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztTQUN0RDtLQUNKO0lBRUQsTUFBTSxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsd0JBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUUxRCxNQUFNLElBQUksT0FBTyxDQUFPLFNBQVMsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUM7SUFFM0UsTUFBTSxPQUFPLEdBQUcsR0FBRyxRQUFRLE1BQU0sSUFBSSxJQUFJLElBQUksRUFBRSxDQUFDO0lBQ2hELGdCQUFHLENBQUMsSUFBSSxDQUFDLHFCQUFxQixPQUFPLEVBQUUsQ0FBQyxDQUFDO0lBRXpDLE1BQU0sT0FBTyxHQUFHLElBQUksR0FBRyxFQUFVLENBQUM7SUFFbEMsS0FBSyxNQUFNLEtBQUssSUFBSSxDQUFDLFlBQVksRUFBRSxrQkFBa0IsQ0FBQztRQUFFLE1BQU0sQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLFVBQVUsTUFBTTtZQUNyRixPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3BCLE1BQU0sQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUNyRCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksTUFBTSxDQUFDO0lBRVgsS0FBSyxVQUFVLFFBQVE7UUFDbkIsSUFBSSxNQUFNLEVBQUU7WUFDUixnQkFBRyxDQUFDLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO1lBQ3JDLE1BQU0sTUFBTSxDQUFDO1NBQ2hCO1FBRUQsTUFBTSxHQUFHLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUUzRCxJQUFJLE9BQU8sQ0FBQyxJQUFJLEdBQUcsQ0FBQyxFQUFFO1lBQ2xCLGdCQUFHLENBQUMsS0FBSyxDQUFDLFdBQVcsT0FBTyxDQUFDLElBQUksb0JBQW9CLENBQUMsQ0FBQztZQUN2RCxLQUFLLE1BQU0sTUFBTSxJQUFJLE9BQU8sRUFBRTtnQkFDMUIsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDO2dCQUNqQixPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQzFCO1NBQ0o7UUFFRCxnQkFBRyxDQUFDLEtBQUssQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO1FBQ3pDLE1BQU0sT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBRXRCLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNmLE1BQU0sTUFBTSxDQUFDO1FBQ2IsZ0JBQUcsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7UUFFMUIsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUVELE9BQU87UUFDSCxPQUFPO1FBQ1AsTUFBTTtRQUNOLE1BQU07UUFDTixPQUFPO1FBQ1AsT0FBTztRQUNQLE9BQU87UUFDUCxRQUFRO0tBQ1gsQ0FBQztBQUNOLENBQUM7QUF0RkQsa0NBc0ZDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtGU1dhdGNoZXJ9IGZyb20gXCJjaG9raWRhclwiO1xuaW1wb3J0IHtIYW5kbGVyLCBIVFRQVmVyc2lvbn0gZnJvbSBcImZpbmQtbXktd2F5XCI7XG5pbXBvcnQge1NlcnZlciBhcyBIdHRwU2VydmVyfSBmcm9tIFwiaHR0cFwiO1xuaW1wb3J0IHtIdHRwMlNlcnZlcn0gZnJvbSBcImh0dHAyXCI7XG5pbXBvcnQge1NlcnZlciBhcyBIdHRwc1NlcnZlcn0gZnJvbSBcImh0dHBzXCI7XG5pbXBvcnQge1NvY2tldH0gZnJvbSBcIm5ldFwiO1xuaW1wb3J0IGxvZyBmcm9tIFwiQG1vZGVybm8vbG9nZ2VyXCI7XG5pbXBvcnQge3VzZU1lc3NhZ2luZ30gZnJvbSBcIi4vbWVzc2FnaW5nXCI7XG5pbXBvcnQge01vZGVybm9PcHRpb25zfSBmcm9tIFwiLi9jb25maWd1cmVcIjtcbmltcG9ydCB7dXNlUmVxdWVzdEhhbmRsZXJ9IGZyb20gXCIuL3JlcXVlc3QtaGFuZGxlclwiO1xuaW1wb3J0IHt1c2VXYXRjaGVyfSBmcm9tIFwiLi93YXRjaGVyXCI7XG5cbmV4cG9ydCB0eXBlIFNlcnZlck9wdGlvbnMgPSB7XG4gICAgcHJvdG9jb2w/OiBcImh0dHBcIiB8IFwiaHR0cHNcIlxuICAgIGhvc3Q/OiBzdHJpbmdcbiAgICBwb3J0PzogbnVtYmVyXG4gICAgb3B0aW9ucz86IHtcbiAgICAgICAga2V5Pzogc3RyaW5nXG4gICAgICAgIGNlcnQ/OiBzdHJpbmdcbiAgICAgICAgYWxsb3dIVFRQMT86IGJvb2xlYW5cbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX1NFUlZFUl9PUFRJT05TOiBTZXJ2ZXJPcHRpb25zID0ge1xuICAgIHByb3RvY29sOiBcImh0dHBcIixcbiAgICBob3N0OiBcImxvY2FsaG9zdFwiLFxuICAgIHBvcnQ6IDMwMDBcbn07XG5cbmV4cG9ydCB0eXBlIFNlcnZpY2VzID0ge1xuICAgIHdhdGNoZXI/OiBGU1dhdGNoZXJcbiAgICBoYW5kbGVyPzogSGFuZGxlcjxIVFRQVmVyc2lvbi5WMSB8IEhUVFBWZXJzaW9uLlYyPlxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc3RhcnRTZXJ2ZXIob3B0aW9uczogTW9kZXJub09wdGlvbnMpIHtcblxuICAgIGNvbnN0IHtcbiAgICAgICAgc2VydmVyOiB7XG4gICAgICAgICAgICBwcm90b2NvbCxcbiAgICAgICAgICAgIGhvc3QsXG4gICAgICAgICAgICBwb3J0LFxuICAgICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgICAgIGtleSwgY2VydCwgYWxsb3dIVFRQMVxuICAgICAgICAgICAgfSA9IHt9IGFzIGFueVxuICAgICAgICB9ID0gREVGQVVMVF9TRVJWRVJfT1BUSU9OU1xuICAgIH0gPSBvcHRpb25zO1xuXG4gICAgY29uc3Qgd2F0Y2hlciA9IHVzZVdhdGNoZXIob3B0aW9ucyk7XG4gICAgY29uc3QgaGFuZGxlciA9IHVzZVJlcXVlc3RIYW5kbGVyKG9wdGlvbnMpO1xuXG4gICAgbGV0IG1vZHVsZSwgc2VydmVyOiBIdHRwU2VydmVyIHwgSHR0cHNTZXJ2ZXIgfCBIdHRwMlNlcnZlcjtcblxuICAgIGlmIChvcHRpb25zLmh0dHAyKSB7XG4gICAgICAgIG1vZHVsZSA9IHJlcXVpcmUoXCJodHRwMlwiKTtcbiAgICAgICAgaWYgKHByb3RvY29sID09PSBcImh0dHBcIikge1xuICAgICAgICAgICAgc2VydmVyID0gbW9kdWxlLmNyZWF0ZVNlcnZlcih7YWxsb3dIVFRQMX0sIGhhbmRsZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VydmVyID0gbW9kdWxlLmNyZWF0ZVNlY3VyZVNlcnZlcih7a2V5LCBjZXJ0LCBhbGxvd0hUVFAxfSwgaGFuZGxlcik7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAocHJvdG9jb2wgPT09IFwiaHR0cFwiKSB7XG4gICAgICAgICAgICBtb2R1bGUgPSByZXF1aXJlKFwiaHR0cFwiKTtcbiAgICAgICAgICAgIHNlcnZlciA9IG1vZHVsZS5jcmVhdGVTZXJ2ZXIoaGFuZGxlcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtb2R1bGUgPSByZXF1aXJlKFwiaHR0cHNcIik7XG4gICAgICAgICAgICBzZXJ2ZXIgPSBtb2R1bGUuY3JlYXRlU2VydmVyKHtrZXksIGNlcnR9LCBoYW5kbGVyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNlcnZlci5vbihcInVwZ3JhZGVcIiwgdXNlTWVzc2FnaW5nKG9wdGlvbnMpLmhhbmRsZVVwZ3JhZGUpO1xuXG4gICAgYXdhaXQgbmV3IFByb21pc2U8dm9pZD4obGlzdGVuaW5nID0+IHNlcnZlci5saXN0ZW4ocG9ydCwgaG9zdCwgbGlzdGVuaW5nKSk7XG5cbiAgICBjb25zdCBhZGRyZXNzID0gYCR7cHJvdG9jb2x9Oi8vJHtob3N0fToke3BvcnR9YDtcbiAgICBsb2cuaW5mbyhgc2VydmVyIHN0YXJ0ZWQgb24gJHthZGRyZXNzfWApO1xuXG4gICAgY29uc3Qgc29ja2V0cyA9IG5ldyBTZXQ8U29ja2V0PigpO1xuXG4gICAgZm9yIChjb25zdCBldmVudCBvZiBbXCJjb25uZWN0aW9uXCIsIFwic2VjdXJlQ29ubmVjdGlvblwiXSkgc2VydmVyLm9uKGV2ZW50LCBmdW5jdGlvbiAoc29ja2V0KSB7XG4gICAgICAgIHNvY2tldHMuYWRkKHNvY2tldCk7XG4gICAgICAgIHNvY2tldC5vbihcImNsb3NlXCIsICgpID0+IHNvY2tldHMuZGVsZXRlKHNvY2tldCkpO1xuICAgIH0pO1xuXG4gICAgbGV0IGNsb3NlZDtcblxuICAgIGFzeW5jIGZ1bmN0aW9uIHNodXRkb3duKHRoaXM6IGFueSkge1xuICAgICAgICBpZiAoY2xvc2VkKSB7XG4gICAgICAgICAgICBsb2cuZGVidWcoXCJzaHV0ZG93biBpbiBwcm9ncmVzcy4uLlwiKTtcbiAgICAgICAgICAgIGF3YWl0IGNsb3NlZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNsb3NlZCA9IG5ldyBQcm9taXNlKGNsb3NlZCA9PiBzZXJ2ZXIub24oXCJjbG9zZVwiLCBjbG9zZWQpKTtcblxuICAgICAgICBpZiAoc29ja2V0cy5zaXplID4gMCkge1xuICAgICAgICAgICAgbG9nLmRlYnVnKGBjbG9zaW5nICR7c29ja2V0cy5zaXplfSBwZW5kaW5nIHNvY2tldC4uLmApO1xuICAgICAgICAgICAgZm9yIChjb25zdCBzb2NrZXQgb2Ygc29ja2V0cykge1xuICAgICAgICAgICAgICAgIHNvY2tldC5kZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgc29ja2V0cy5kZWxldGUoc29ja2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGxvZy5kZWJ1ZyhgY2xvc2luZyBjaG9raWRhciB3YXRjaGVyLi4uYCk7XG4gICAgICAgIGF3YWl0IHdhdGNoZXIuY2xvc2UoKTtcblxuICAgICAgICBzZXJ2ZXIuY2xvc2UoKTtcbiAgICAgICAgYXdhaXQgY2xvc2VkO1xuICAgICAgICBsb2cuaW5mbyhcInNlcnZlciBjbG9zZWRcIik7XG5cbiAgICAgICAgcmV0dXJuIGNsb3NlZDtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBvcHRpb25zLFxuICAgICAgICBtb2R1bGUsXG4gICAgICAgIHNlcnZlcixcbiAgICAgICAgd2F0Y2hlcixcbiAgICAgICAgaGFuZGxlcixcbiAgICAgICAgYWRkcmVzcyxcbiAgICAgICAgc2h1dGRvd25cbiAgICB9O1xufVxuIl19