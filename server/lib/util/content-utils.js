"use strict";
const NODE_FETCH_USER_AGENT = "node-fetch/1.0 (+https://github.com/bitinn/node-fetch)";
module.exports.contentText = function (content) {
    if (typeof content === "string") {
        return content;
    }
    if (isStream(content)) {
        return new Promise(function (resolve, reject) {
            let text = "";
            content.setEncoding("utf8");
            content.on("data", function (chunk) {
                text += chunk;
            });
            content.on("end", function () {
                resolve(text);
            });
            content.on("error", reject);
        });
    }
    if (Buffer.isBuffer(content)) {
        return content.toString();
    }
    return "";
};
module.exports.sendContent = function (stream, content, userAgent) {
    if (isStream(content)) {
        return new Promise(function (resolve, reject) {
            stream.on('end', resolve);
            stream.on('error', reject);
            content.pipe(stream);
        });
    }
    else if (Buffer.isBuffer(content)) {
        stream.end(content, "binary");
    }
    else {
        // This is to circumvent an issue with node-fetch returning empty response.text()
        // when emoji are used in the response
        stream.end(content, userAgent === NODE_FETCH_USER_AGENT ? "binary" : "utf-8");
    }
};
function isStream(stream) {
    return stream !== null && typeof stream === "object" && typeof stream.pipe === "function";
}
module.exports.EMPTY_OBJECT = Object.freeze(Object.create(null));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGVudC11dGlscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL2NvbnRlbnQtdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU0scUJBQXFCLEdBQUcsd0RBQXdELENBQUM7QUFFdkYsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEdBQUcsVUFBVSxPQUFPO0lBRTFDLElBQUksT0FBTyxPQUFPLEtBQUssUUFBUSxFQUFFO1FBQzdCLE9BQU8sT0FBTyxDQUFDO0tBQ2xCO0lBRUQsSUFBSSxRQUFRLENBQUMsT0FBTyxDQUFDLEVBQUU7UUFDbkIsT0FBTyxJQUFJLE9BQU8sQ0FBQyxVQUFVLE9BQU8sRUFBRSxNQUFNO1lBQ3hDLElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQztZQUNkLE9BQU8sQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDNUIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsVUFBVSxLQUFLO2dCQUM5QixJQUFJLElBQUksS0FBSyxDQUFDO1lBQ2xCLENBQUMsQ0FBQyxDQUFDO1lBQ0gsT0FBTyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUU7Z0JBQ2QsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2xCLENBQUMsQ0FBQyxDQUFDO1lBQ0gsT0FBTyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDaEMsQ0FBQyxDQUFDLENBQUM7S0FDTjtJQUVELElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRTtRQUMxQixPQUFPLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQztLQUM3QjtJQUVELE9BQU8sRUFBRSxDQUFDO0FBQ2QsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEdBQUcsVUFBVSxNQUFNLEVBQUUsT0FBTyxFQUFFLFNBQVM7SUFFN0QsSUFBSSxRQUFRLENBQUMsT0FBTyxDQUFDLEVBQUU7UUFDbkIsT0FBTyxJQUFJLE9BQU8sQ0FBQyxVQUFVLE9BQU8sRUFBRSxNQUFNO1lBQ3hDLE1BQU0sQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQzFCLE1BQU0sQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQzNCLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDekIsQ0FBQyxDQUFDLENBQUM7S0FDTjtTQUFNLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRTtRQUNqQyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQztLQUNqQztTQUFNO1FBQ0gsaUZBQWlGO1FBQ2pGLHNDQUFzQztRQUN0QyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxTQUFTLEtBQUsscUJBQXFCLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDakY7QUFDTCxDQUFDLENBQUM7QUFFRixTQUFTLFFBQVEsQ0FBQyxNQUFNO0lBQ3BCLE9BQU8sTUFBTSxLQUFLLElBQUksSUFBSSxPQUFPLE1BQU0sS0FBSyxRQUFRLElBQUksT0FBTyxNQUFNLENBQUMsSUFBSSxLQUFLLFVBQVUsQ0FBQztBQUM5RixDQUFDO0FBRUQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBOT0RFX0ZFVENIX1VTRVJfQUdFTlQgPSBcIm5vZGUtZmV0Y2gvMS4wICgraHR0cHM6Ly9naXRodWIuY29tL2JpdGlubi9ub2RlLWZldGNoKVwiO1xuXG5tb2R1bGUuZXhwb3J0cy5jb250ZW50VGV4dCA9IGZ1bmN0aW9uIChjb250ZW50KSB7XG5cbiAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfVxuXG4gICAgaWYgKGlzU3RyZWFtKGNvbnRlbnQpKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICBsZXQgdGV4dCA9IFwiXCI7XG4gICAgICAgICAgICBjb250ZW50LnNldEVuY29kaW5nKFwidXRmOFwiKTtcbiAgICAgICAgICAgIGNvbnRlbnQub24oXCJkYXRhXCIsIGZ1bmN0aW9uIChjaHVuaykge1xuICAgICAgICAgICAgICAgIHRleHQgKz0gY2h1bms7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnRlbnQub24oXCJlbmRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJlc29sdmUodGV4dCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnRlbnQub24oXCJlcnJvclwiLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoQnVmZmVyLmlzQnVmZmVyKGNvbnRlbnQpKSB7XG4gICAgICAgIHJldHVybiBjb250ZW50LnRvU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFwiXCI7XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5zZW5kQ29udGVudCA9IGZ1bmN0aW9uIChzdHJlYW0sIGNvbnRlbnQsIHVzZXJBZ2VudCkge1xuXG4gICAgaWYgKGlzU3RyZWFtKGNvbnRlbnQpKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICBzdHJlYW0ub24oJ2VuZCcsIHJlc29sdmUpO1xuICAgICAgICAgICAgc3RyZWFtLm9uKCdlcnJvcicsIHJlamVjdCk7XG4gICAgICAgICAgICBjb250ZW50LnBpcGUoc3RyZWFtKTtcbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChCdWZmZXIuaXNCdWZmZXIoY29udGVudCkpIHtcbiAgICAgICAgc3RyZWFtLmVuZChjb250ZW50LCBcImJpbmFyeVwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBUaGlzIGlzIHRvIGNpcmN1bXZlbnQgYW4gaXNzdWUgd2l0aCBub2RlLWZldGNoIHJldHVybmluZyBlbXB0eSByZXNwb25zZS50ZXh0KClcbiAgICAgICAgLy8gd2hlbiBlbW9qaSBhcmUgdXNlZCBpbiB0aGUgcmVzcG9uc2VcbiAgICAgICAgc3RyZWFtLmVuZChjb250ZW50LCB1c2VyQWdlbnQgPT09IE5PREVfRkVUQ0hfVVNFUl9BR0VOVCA/IFwiYmluYXJ5XCIgOiBcInV0Zi04XCIpO1xuICAgIH1cbn07XG5cbmZ1bmN0aW9uIGlzU3RyZWFtKHN0cmVhbSkge1xuICAgIHJldHVybiBzdHJlYW0gIT09IG51bGwgJiYgdHlwZW9mIHN0cmVhbSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2Ygc3RyZWFtLnBpcGUgPT09IFwiZnVuY3Rpb25cIjtcbn1cblxubW9kdWxlLmV4cG9ydHMuRU1QVFlfT0JKRUNUID0gT2JqZWN0LmZyZWV6ZShPYmplY3QuY3JlYXRlKG51bGwpKTtcbiJdfQ==